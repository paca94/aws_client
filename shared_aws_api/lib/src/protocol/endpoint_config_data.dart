// AUTO-GENERATED: This file is generated by the `generator` package

import 'endpoint.dart';

final rules = <String, RegionConfig>{
  '*/*': RegionConfig(
    endpoint: '{service}.{region}.amazonaws.com',
  ),
  'cn-*/*': RegionConfig(
    endpoint: '{service}.{region}.amazonaws.com.cn',
  ),
  'us-iso-*/*': _usIso,
  'us-isob-*/*': _usIsob,
  '*/budgets': _globalSSL,
  '*/cloudfront': _globalSSL,
  '*/sts': _globalSSL,
  '*/importexport': RegionConfig(
    endpoint: '{service}.amazonaws.com',
    globalEndpoint: true,
    signatureVersion: 'v2',
  ),
  '*/route53': _globalSSL,
  'cn-*/route53': RegionConfig(
    endpoint: '{service}.amazonaws.com.cn',
    globalEndpoint: true,
    signingRegion: 'cn-northwest-1',
  ),
  'us-gov-*/route53': _globalGovCloud,
  'us-iso-*/route53': RegionConfig(
    endpoint: '{service}.c2s.ic.gov',
    globalEndpoint: true,
    signingRegion: 'us-iso-east-1',
  ),
  'us-isob-*/route53': RegionConfig(
    endpoint: '{service}.sc2s.sgov.gov',
    globalEndpoint: true,
    signingRegion: 'us-isob-east-1',
  ),
  '*/waf': _globalSSL,
  '*/iam': _globalSSL,
  'cn-*/iam': RegionConfig(
    endpoint: '{service}.cn-north-1.amazonaws.com.cn',
    globalEndpoint: true,
    signingRegion: 'cn-north-1',
  ),
  'us-gov-*/iam': _globalGovCloud,
  'us-gov-*/sts': RegionConfig(
    endpoint: '{service}.{region}.amazonaws.com',
  ),
  'us-gov-west-1/s3': _s3signature,
  'us-west-1/s3': _s3signature,
  'us-west-2/s3': _s3signature,
  'eu-west-1/s3': _s3signature,
  'ap-southeast-1/s3': _s3signature,
  'ap-southeast-2/s3': _s3signature,
  'ap-northeast-1/s3': _s3signature,
  'sa-east-1/s3': _s3signature,
  'us-east-1/s3': RegionConfig(
    endpoint: '{service}.amazonaws.com',
    signatureVersion: 's3',
  ),
  'us-east-1/sdb': RegionConfig(
    endpoint: '{service}.amazonaws.com',
    signatureVersion: 'v2',
  ),
  '*/sdb': RegionConfig(
    endpoint: '{service}.{region}.amazonaws.com',
    signatureVersion: 'v2',
  ),
};

final _globalSSL = RegionConfig(
  endpoint: 'https://{service}.amazonaws.com',
  globalEndpoint: true,
  signingRegion: 'us-east-1',
);

final _globalGovCloud = RegionConfig(
  endpoint: '{service}.us-gov.amazonaws.com',
  globalEndpoint: true,
  signingRegion: 'us-gov-west-1',
);

final _s3signature = RegionConfig(
  endpoint: '{service}.{region}.amazonaws.com',
  signatureVersion: 's3',
);

final _usIso = RegionConfig(
  endpoint: '{service}.{region}.c2s.ic.gov',
);

final _usIsob = RegionConfig(
  endpoint: '{service}.{region}.sc2s.sgov.gov',
);

final _fipsStandard = RegionConfig(
  endpoint: '{service}-fips.{region}.amazonaws.com',
);

final _fipsDotPrefix = RegionConfig(
  endpoint: 'fips.{service}.{region}.amazonaws.com',
);

final _fipsWithoutRegion = RegionConfig(
  endpoint: '{service}-fips.amazonaws.com',
);

final _fips_api_ecr = RegionConfig(
  endpoint: 'ecr-fips.{region}.amazonaws.com',
);

final _fips_api_sagemaker = RegionConfig(
  endpoint: 'api-fips.sagemaker.{region}.amazonaws.com',
);

final _fips_models_lex = RegionConfig(
  endpoint: 'models-fips.lex.{region}.amazonaws.com',
);

final _fips_runtime_lex = RegionConfig(
  endpoint: 'runtime-fips.lex.{region}.amazonaws.com',
);

final _fipsWithServiceOnly = RegionConfig(
  endpoint: '{service}.{region}.amazonaws.com',
);

final _dualstackLegacy = RegionConfig(
  endpoint: '{service}.dualstack.{region}.amazonaws.com',
);

final _dualstackLegacyCn = RegionConfig(
  endpoint: '{service}.dualstack.{region}.amazonaws.com.cn',
);

final _dualstackFipsLegacy = RegionConfig(
  endpoint: '{service}-fips.dualstack.{region}.amazonaws.com',
);

final _dualstackFipsLegacyCn = RegionConfig(
  endpoint: '{service}-fips.dualstack.{region}.amazonaws.com.cn',
);

final _dualstackLegacyEc2 = RegionConfig(
  endpoint: 'api.ec2.{region}.aws',
);
